/**
 * Boilerplate templates for required Next.js files
 * These ensure projects always have the minimum required files
 */

const boilerplateTemplates = {
  '/src/app/layout.tsx': `import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Next.js App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className="antialiased">
        {children}
      </body>
    </html>
  );
}`,

  '/src/app/globals.css': `@tailwind base;
@tailwind components;
@tailwind utilities;`,

  '/package.json': `{
  "name": "nextjs-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "autoprefixer": "^10.0.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "^14.0.0",
    "postcss": "^8.0.0",
    "tailwindcss": "^4.0.0",
    "@tailwindcss/postcss": "^4.0.0-alpha.33",
    "typescript": "^5.0.0"
  }
}`,

  '/tailwind.config.js': `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`,

  '/postcss.config.js': `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`,

  '/next.config.js': `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig`,

  '/tsconfig.json': `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}`,

  '/.eslintrc.json': `{
  "extends": "next/core-web-vitals"
}`,

  '/.gitignore': `# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts`,

  '/README.md': `# Next.js App

This is a [Next.js](https://nextjs.org/) project bootstrapped with \`create-next-app\`.

## Getting Started

First, run the development server:

\`\`\`bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.`
};

/**
 * Get all boilerplate templates
 */
function getAllTemplates() {
  return { ...boilerplateTemplates };
}

/**
 * Get a specific template
 */
function getTemplate(path) {
  return boilerplateTemplates[path];
}

/**
 * Check if a file is a boilerplate file
 */
function isBoilerplateFile(path) {
  return path in boilerplateTemplates;
}

/**
 * Get list of required boilerplate files
 */
function getRequiredFiles() {
  return Object.keys(boilerplateTemplates);
}

/**
 * Ensure all boilerplate files exist in the generated files
 * @param {Object} generatedFiles - Object with file paths as keys and content as values
 * @returns {Object} Updated files object with all required boilerplate
 */
function ensureBoilerplateFiles(generatedFiles) {
  const updatedFiles = { ...generatedFiles };
  
  for (const [path, template] of Object.entries(boilerplateTemplates)) {
    // Only add if the file doesn't exist
    if (!updatedFiles[path]) {
      updatedFiles[path] = template;
      console.log(`Added missing boilerplate file: ${path}`);
    }
  }
  
  return updatedFiles;
}

module.exports = {
  getAllTemplates,
  getTemplate,
  isBoilerplateFile,
  getRequiredFiles,
  ensureBoilerplateFiles
};